name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  # Build for every platform
  build:
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
          include:
            - target: x86_64-unknown-linux-gnu
              os: ubuntu-latest
              name: vau-x86_64-unknown-linux-gnu.tar.gz

            - target: x86_64-unknown-linux-musl
              os: ubuntu-latest
              name: vau-x86_64-unknown-linux-musl.tar.gz

            - target: i686-unknown-linux-musl
              os: ubuntu-latest
              name: vau-i686-unknown-linux-musl.tar.gz

            - target: aarch64-unknown-linux-musl
              os: ubuntu-latest
              name: vau-aarch64-unknown-linux-musl.tar.gz

            - target: arm-unknown-linux-musleabihf
              os: ubuntu-latest
              name: vau-arm-unknown-linux-musleabihf.tar.gz

            - target: x86_64-apple-darwin
              os: macOS-latest
              name: vau-x86_64-apple-darwin.tar.gz

            - target: x86_64-pc-windows-msvc
              os: windows-latest
              name: vau-x86_64-pc-windows-msvc.zip
            
            - target: i686-pc-windows-msvc
              os: windows-latest
              name: vau-i686-pc-windows-msvc.zip
            
            - target: aarch64-pc-windows-msvc
              os: windows-latest
              name: vau-aarch64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      # Checkout the repo
      - name: Setup | Checkout
        uses: actions/checkout@v2
      
      # Setup the rust toolchain
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}
      
      # Build using cargo
      - name: Build | Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' }}
      
      # Process windows artifacts
      - name: Post Build | Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          mv cli.exe vau.exe
          mv gui.exe vau_gui.exe
          strip vau.exe
          strip vau_gui.exe
          7z a ../../../${{ matrix.name }} vau.exe vau_gui.exe ../../../LICENCE
          cd -
  
      # Process all other artifacts
      - name: Post Build | Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          mv cli vau
          mv gui vau_gui
          strip vau || true
          strip vau_gui || true
          tar czvf ../../../${{ matrix.name }} vau vau_gui ../../../LICENCE
          cd -
      
      # Upload build artifacts
      - name: Release | Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
      
  # Create a release
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Setup | Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Download artifacts
      - name: Setup | Artifacts
        uses: actions/download-artifact@v2

      # Publish release
      - name: Build | Publish
        uses: softprops/action-gh-release@v1
        with:
          files: |
            vau-*/vau-*
            LICENCE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
